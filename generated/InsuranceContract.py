# Code generated by moonworm : https://github.com/moonstream-to/moonworm
# Moonworm version : 0.8.0

import argparse
import json
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from brownie import Contract, network, project
from brownie.network.contract import ContractContainer
from eth_typing.evm import ChecksumAddress


PROJECT_DIRECTORY = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
BUILD_DIRECTORY = os.path.join(PROJECT_DIRECTORY, "build", "contracts")


def boolean_argument_type(raw_value: str) -> bool:
    TRUE_VALUES = ["1", "t", "y", "true", "yes"]
    FALSE_VALUES = ["0", "f", "n", "false", "no"]

    if raw_value.lower() in TRUE_VALUES:
        return True
    elif raw_value.lower() in FALSE_VALUES:
        return False

    raise ValueError(
        f"Invalid boolean argument: {raw_value}. Value must be one of: {','.join(TRUE_VALUES + FALSE_VALUES)}"
    )


def bytes_argument_type(raw_value: str) -> str:
    return raw_value


def get_abi_json(abi_name: str) -> List[Dict[str, Any]]:
    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    abi_json = build.get("abi")
    if abi_json is None:
        raise ValueError(f"Could not find ABI definition in: {abi_full_path}")

    return abi_json


def contract_from_build(abi_name: str) -> ContractContainer:
    # This is workaround because brownie currently doesn't support loading the same project multiple
    # times. This causes problems when using multiple contracts from the same project in the same
    # python project.
    PROJECT = project.main.Project("moonworm", Path(PROJECT_DIRECTORY))

    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    return ContractContainer(PROJECT, build)


class InsuranceContract:
    def __init__(self, contract_address: Optional[ChecksumAddress]):
        self.contract_name = "InsuranceContract"
        self.address = contract_address
        self.contract = None
        self.abi = get_abi_json("InsuranceContract")
        if self.address is not None:
            self.contract: Optional[Contract] = Contract.from_abi(
                self.contract_name, self.address, self.abi
            )

    def deploy(self, transaction_config):
        contract_class = contract_from_build(self.contract_name)
        deployed_contract = contract_class.deploy(transaction_config)
        self.address = deployed_contract.address
        self.contract = deployed_contract
        return deployed_contract.tx

    def assert_contract_is_instantiated(self) -> None:
        if self.contract is None:
            raise Exception("contract has not been instantiated")

    def verify_contract(self):
        self.assert_contract_is_instantiated()
        contract_class = contract_from_build(self.contract_name)
        contract_class.publish_source(self.contract)

    def access_document(
        self,
        insurance_firm_address: ChecksumAddress,
        index: int,
        reason: str,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.accessDocument(
            insurance_firm_address, index, reason, transaction_config
        )

    def get_access_control(
        self,
        client_address: ChecksumAddress,
        index: int,
        user: ChecksumAddress,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getAccessControl.call(
            client_address, index, user, block_identifier=block_number
        )

    def get_all_documents(
        self, user: ChecksumAddress, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getAllDocuments.call(user, block_identifier=block_number)

    def get_client_documents(
        self,
        client_address: ChecksumAddress,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getClientDocuments.call(
            client_address, block_identifier=block_number
        )

    def get_document_details(
        self,
        client_address: ChecksumAddress,
        index: int,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getDocumentDetails.call(
            client_address, index, block_identifier=block_number
        )

    def get_document_traceability(
        self,
        client_address: ChecksumAddress,
        index: int,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getDocumentTraceability.call(
            client_address, index, block_identifier=block_number
        )

    def grant_access(
        self,
        insurance_company: ChecksumAddress,
        client_address: ChecksumAddress,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.grantAccess(
            insurance_company, client_address, transaction_config
        )

    def has_access_to_insurance(
        self,
        insurance_company: ChecksumAddress,
        client_address: ChecksumAddress,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.hasAccessToInsurance.call(
            insurance_company, client_address, block_identifier=block_number
        )

    def mark_document_as_invalid(
        self, client_address: ChecksumAddress, index: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.markDocumentAsInvalid(
            client_address, index, transaction_config
        )

    def owner(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.owner.call(block_identifier=block_number)

    def renounce_ownership(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.renounceOwnership(transaction_config)

    def revoke_access(
        self,
        client_address: ChecksumAddress,
        insurance_company: ChecksumAddress,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.revokeAccess(
            client_address, insurance_company, transaction_config
        )

    def set_access_control(
        self,
        insurance_firm: ChecksumAddress,
        index: int,
        user: ChecksumAddress,
        has_access: bool,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setAccessControl(
            insurance_firm, index, user, has_access, transaction_config
        )

    def submit_document(self, document_hash: str, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.submitDocument(document_hash, transaction_config)

    def transfer_ownership(self, new_owner: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transferOwnership(new_owner, transaction_config)


def get_transaction_config(args: argparse.Namespace) -> Dict[str, Any]:
    signer = network.accounts.load(args.sender, args.password)
    transaction_config: Dict[str, Any] = {"from": signer}
    if args.gas_price is not None:
        transaction_config["gas_price"] = args.gas_price
    if args.max_fee_per_gas is not None:
        transaction_config["max_fee"] = args.max_fee_per_gas
    if args.max_priority_fee_per_gas is not None:
        transaction_config["priority_fee"] = args.max_priority_fee_per_gas
    if args.confirmations is not None:
        transaction_config["required_confs"] = args.confirmations
    if args.nonce is not None:
        transaction_config["nonce"] = args.nonce
    return transaction_config


def add_default_arguments(parser: argparse.ArgumentParser, transact: bool) -> None:
    parser.add_argument(
        "--network", required=True, help="Name of brownie network to connect to"
    )
    parser.add_argument(
        "--address", required=False, help="Address of deployed contract to connect to"
    )
    if not transact:
        parser.add_argument(
            "--block-number",
            required=False,
            type=int,
            help="Call at the given block number, defaults to latest",
        )
        return
    parser.add_argument(
        "--sender", required=True, help="Path to keystore file for transaction sender"
    )
    parser.add_argument(
        "--password",
        required=False,
        help="Password to keystore file (if you do not provide it, you will be prompted for it)",
    )
    parser.add_argument(
        "--gas-price", default=None, help="Gas price at which to submit transaction"
    )
    parser.add_argument(
        "--max-fee-per-gas",
        default=None,
        help="Max fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--max-priority-fee-per-gas",
        default=None,
        help="Max priority fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--confirmations",
        type=int,
        default=None,
        help="Number of confirmations to await before considering a transaction completed",
    )
    parser.add_argument(
        "--nonce", type=int, default=None, help="Nonce for the transaction (optional)"
    )
    parser.add_argument(
        "--value", default=None, help="Value of the transaction in wei(optional)"
    )
    parser.add_argument("--verbose", action="store_true", help="Print verbose output")


def handle_deploy(args: argparse.Namespace) -> None:
    network.connect(args.network)
    transaction_config = get_transaction_config(args)
    contract = InsuranceContract(None)
    result = contract.deploy(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_verify_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    result = contract.verify_contract()
    print(result)


def handle_access_document(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.access_document(
        insurance_firm_address=args.insurance_firm_address,
        index=args.index,
        reason=args.reason,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_get_access_control(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    result = contract.get_access_control(
        client_address=args.client_address,
        index=args.index,
        user=args.user,
        block_number=args.block_number,
    )
    print(result)


def handle_get_all_documents(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    result = contract.get_all_documents(user=args.user, block_number=args.block_number)
    print(result)


def handle_get_client_documents(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    result = contract.get_client_documents(
        client_address=args.client_address, block_number=args.block_number
    )
    print(result)


def handle_get_document_details(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    result = contract.get_document_details(
        client_address=args.client_address,
        index=args.index,
        block_number=args.block_number,
    )
    print(result)


def handle_get_document_traceability(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    result = contract.get_document_traceability(
        client_address=args.client_address,
        index=args.index,
        block_number=args.block_number,
    )
    print(result)


def handle_grant_access(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.grant_access(
        insurance_company=args.insurance_company,
        client_address=args.client_address,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_has_access_to_insurance(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    result = contract.has_access_to_insurance(
        insurance_company=args.insurance_company,
        client_address=args.client_address,
        block_number=args.block_number,
    )
    print(result)


def handle_mark_document_as_invalid(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.mark_document_as_invalid(
        client_address=args.client_address,
        index=args.index,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_owner(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    result = contract.owner(block_number=args.block_number)
    print(result)


def handle_renounce_ownership(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.renounce_ownership(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_revoke_access(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.revoke_access(
        client_address=args.client_address,
        insurance_company=args.insurance_company,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_access_control(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_access_control(
        insurance_firm=args.insurance_firm,
        index=args.index,
        user=args.user,
        has_access=args.has_access,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_submit_document(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.submit_document(
        document_hash=args.document_hash, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_transfer_ownership(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = InsuranceContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer_ownership(
        new_owner=args.new_owner, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def generate_cli() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="CLI for InsuranceContract")
    parser.set_defaults(func=lambda _: parser.print_help())
    subcommands = parser.add_subparsers()

    deploy_parser = subcommands.add_parser("deploy")
    add_default_arguments(deploy_parser, True)
    deploy_parser.set_defaults(func=handle_deploy)

    verify_contract_parser = subcommands.add_parser("verify-contract")
    add_default_arguments(verify_contract_parser, False)
    verify_contract_parser.set_defaults(func=handle_verify_contract)

    access_document_parser = subcommands.add_parser("access-document")
    add_default_arguments(access_document_parser, True)
    access_document_parser.add_argument(
        "--insurance-firm-address", required=True, help="Type: address"
    )
    access_document_parser.add_argument(
        "--index", required=True, help="Type: uint256", type=int
    )
    access_document_parser.add_argument(
        "--reason", required=True, help="Type: string", type=str
    )
    access_document_parser.set_defaults(func=handle_access_document)

    get_access_control_parser = subcommands.add_parser("get-access-control")
    add_default_arguments(get_access_control_parser, False)
    get_access_control_parser.add_argument(
        "--client-address", required=True, help="Type: address"
    )
    get_access_control_parser.add_argument(
        "--index", required=True, help="Type: uint256", type=int
    )
    get_access_control_parser.add_argument(
        "--user", required=True, help="Type: address"
    )
    get_access_control_parser.set_defaults(func=handle_get_access_control)

    get_all_documents_parser = subcommands.add_parser("get-all-documents")
    add_default_arguments(get_all_documents_parser, False)
    get_all_documents_parser.add_argument("--user", required=True, help="Type: address")
    get_all_documents_parser.set_defaults(func=handle_get_all_documents)

    get_client_documents_parser = subcommands.add_parser("get-client-documents")
    add_default_arguments(get_client_documents_parser, False)
    get_client_documents_parser.add_argument(
        "--client-address", required=True, help="Type: address"
    )
    get_client_documents_parser.set_defaults(func=handle_get_client_documents)

    get_document_details_parser = subcommands.add_parser("get-document-details")
    add_default_arguments(get_document_details_parser, False)
    get_document_details_parser.add_argument(
        "--client-address", required=True, help="Type: address"
    )
    get_document_details_parser.add_argument(
        "--index", required=True, help="Type: uint256", type=int
    )
    get_document_details_parser.set_defaults(func=handle_get_document_details)

    get_document_traceability_parser = subcommands.add_parser(
        "get-document-traceability"
    )
    add_default_arguments(get_document_traceability_parser, False)
    get_document_traceability_parser.add_argument(
        "--client-address", required=True, help="Type: address"
    )
    get_document_traceability_parser.add_argument(
        "--index", required=True, help="Type: uint256", type=int
    )
    get_document_traceability_parser.set_defaults(func=handle_get_document_traceability)

    grant_access_parser = subcommands.add_parser("grant-access")
    add_default_arguments(grant_access_parser, True)
    grant_access_parser.add_argument(
        "--insurance-company", required=True, help="Type: address"
    )
    grant_access_parser.add_argument(
        "--client-address", required=True, help="Type: address"
    )
    grant_access_parser.set_defaults(func=handle_grant_access)

    has_access_to_insurance_parser = subcommands.add_parser("has-access-to-insurance")
    add_default_arguments(has_access_to_insurance_parser, False)
    has_access_to_insurance_parser.add_argument(
        "--insurance-company", required=True, help="Type: address"
    )
    has_access_to_insurance_parser.add_argument(
        "--client-address", required=True, help="Type: address"
    )
    has_access_to_insurance_parser.set_defaults(func=handle_has_access_to_insurance)

    mark_document_as_invalid_parser = subcommands.add_parser("mark-document-as-invalid")
    add_default_arguments(mark_document_as_invalid_parser, True)
    mark_document_as_invalid_parser.add_argument(
        "--client-address", required=True, help="Type: address"
    )
    mark_document_as_invalid_parser.add_argument(
        "--index", required=True, help="Type: uint256", type=int
    )
    mark_document_as_invalid_parser.set_defaults(func=handle_mark_document_as_invalid)

    owner_parser = subcommands.add_parser("owner")
    add_default_arguments(owner_parser, False)
    owner_parser.set_defaults(func=handle_owner)

    renounce_ownership_parser = subcommands.add_parser("renounce-ownership")
    add_default_arguments(renounce_ownership_parser, True)
    renounce_ownership_parser.set_defaults(func=handle_renounce_ownership)

    revoke_access_parser = subcommands.add_parser("revoke-access")
    add_default_arguments(revoke_access_parser, True)
    revoke_access_parser.add_argument(
        "--client-address", required=True, help="Type: address"
    )
    revoke_access_parser.add_argument(
        "--insurance-company", required=True, help="Type: address"
    )
    revoke_access_parser.set_defaults(func=handle_revoke_access)

    set_access_control_parser = subcommands.add_parser("set-access-control")
    add_default_arguments(set_access_control_parser, True)
    set_access_control_parser.add_argument(
        "--insurance-firm", required=True, help="Type: address"
    )
    set_access_control_parser.add_argument(
        "--index", required=True, help="Type: uint256", type=int
    )
    set_access_control_parser.add_argument(
        "--user", required=True, help="Type: address"
    )
    set_access_control_parser.add_argument(
        "--has-access", required=True, help="Type: bool", type=boolean_argument_type
    )
    set_access_control_parser.set_defaults(func=handle_set_access_control)

    submit_document_parser = subcommands.add_parser("submit-document")
    add_default_arguments(submit_document_parser, True)
    submit_document_parser.add_argument(
        "--document-hash", required=True, help="Type: string", type=str
    )
    submit_document_parser.set_defaults(func=handle_submit_document)

    transfer_ownership_parser = subcommands.add_parser("transfer-ownership")
    add_default_arguments(transfer_ownership_parser, True)
    transfer_ownership_parser.add_argument(
        "--new-owner", required=True, help="Type: address"
    )
    transfer_ownership_parser.set_defaults(func=handle_transfer_ownership)

    return parser


def main() -> None:
    parser = generate_cli()
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
